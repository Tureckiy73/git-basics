1.1 Версии программного кода
* git status
* git add <file(s)/.> (добавляет в индекс измененный файл)
* git commit -m <message> (коммитит измененные файлы из индекса)
* git log (история коммитов)


1.2 Установка Git
* Новых команд не изучали!

1.3 Индекс и частичные коммиты
* git add -p <file> (добавляет в индекс частично, т.е. конкретные места в коде)
* git rm (удаляет файл из фаловой системы насовсем и добавляет сразу в индекс)
* git rm --cached (удаляет файл из гита)
* git mv (переименование файла)

1.4 Сравнение версий
* git show (как и git log, только показывает еще и что было изменено в последнем коммите)
* git diff <commit1><commit2> (сравниваем изменения в коммитах)
* git diff <commit> (можно сравнивать изменения и одного коммита/ вызывать можно и по хэшу )
* git diff <file>/ git diff HEAD~ (можно вызывать по расстоянию с головы фаловой системы через тильду)
* git diff --name-only <params> (позволяет просмотреть какие файлы были изменены/добавлены/удалены в рамках данного коммита или двух коммитов)

1.5 Отмена изменений и откат версий
* git checkout --<file> (Отменяет еще не закоммиченные изменения в файле. (git reset <file> - вроде как то же самое))
* git commit --amend (изменяет последний коммит и изменяет его сообщение)
* git revert <commit> (отменяет конкретный коммит)
* git reset --hard (полноудаляем все коммиты до указанного, если не указать коммит, то удалятся все modified и те что в индексе, т.е. до добавления в коммит)
* git reset --soft (отправляет изменеия, сделанные в коммитах, до указанного в индекс)
* git reset --mixed (отправляет все коммиты выше данного в unstage область (т.е. до добавления в индекс (modified)) можно писать без mixed

1.6 Репозитории и коллективная работа



1.7 Ветки: создание и управление
* git checkout -b <name> / git checkout <name> (с параметром -b создает новую ветку/ без него просто переключает репозиторий на выбранную ветку)
* git push - u origin <name> (отправляет изменения в конкретный репозиторий(обычно origin, если репозиторий один) и в конкретную ветку)
* git remote -v (выводит список удалённых репозиториев и их адресов)
* git branch -m / git branch -d (-m - переименовывает ветку/ -d - удаляет ветку)
* git fetch / git pull (скачивает изменения из удаленного репозитория в локальный/ pull - сливает ветки одинаковые ветки/ fetch - затягивает, но не сливает, чтобы можно было сравнивать ветки)
* git diff master..origin/develop (сравнивает ветки локальные или же удаленные, но для это сначала надо их затянуть через git fetch)

1.8 Слияние и разрешение конфликтов
* git merge <branch> (вливаем в текущую ветку указанную в команде, в случае конфликта происходит ручное слияние, лучше выполнять в среде разработки)
* git merge --abort (отменяет последнее автоматическое слияние )


1.9 Полезные инструменты
*
*

